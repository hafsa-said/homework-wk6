1.     Show all customers whose last names start with T. Order them by first name from A-Z. 

SELECT 
	first_name, 
	last_name
FROM 
	customer
WHERE 
	last_name 
		LIKE 'T%'
ORDER BY first_name;

-- from the folder customer, we have extracted all the first and last names, filtered where the last name was starting with T, and then arranged alphabetically by first name.

2.     Show all rentals returned from 5/28/2005 to 6/1/2005

SELECT
    film_id,
    title
FROM
    film
WHERE
    film_id IN (
        SELECT
            inventory.film_id
        FROM
            rental
        INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
AND
    return_date BETWEEN '2005-05-28' AND '2005-06-01');
			
-- we have joined the rental folder and inventory folder to find the title of rentals returned within the given range

3.     How would you determine which movies are rented the most? 

SELECT
	film.title AS title,
	COUNT(rental.inventory_id) AS times_rented
FROM
	rental
INNER JOIN
	inventory on inventory.inventory_id= rental.inventory_id
INNER JOIN
	film on film.film_id= inventory.film_id
GROUP BY film.title
ORDER BY times_rented DESC;

-- by counting the number of times each inventory_id comes up, we connected it to the film column to find the title that has been rented the most

4.     Show how much each customer spent on movies (for all time) . Order them from least to most. 

SELECT
    customer.customer_id,
	first_name,
	last_name,
    SUM (amount)
FROM
    customer
INNER JOIN
	payment 
	ON
	payment.customer_id= customer.customer_id
GROUP BY
    customer.customer_id
ORDER BY
	Sum(amount);

5.     Which actor was in the most movies in 2006 (based on this dataset)? Be sure to alias the actor name and count as a more descriptive name. Order the results from most to least. 

SELECT 
	CONCAT(actor.first_name, ' ',
	actor.last_name) AS actor,
	COUNT(title) AS number_of_movies
FROM 
	actor
INNER JOIN
film_actor on actor.actor_id= film_actor.actor_id
INNER JOIN
film on film.film_id= film_actor.film_id
WHERE 
	release_year= 2006
GROUP BY actor
ORDER BY COUNT(title) DESC;

6.	   Write an explain plan for 4 and 5. Show the queries and explain what is happening in each one.

FOR QUESTION 4:

"Sort  (cost=423.12..424.62 rows=599 width=49)"  -- sum of amount of money
"  Sort Key: (sum(payment.amount))" -- sum of amount of money paid by each customer, in the payment table
"  ->  HashAggregate  (cost=388.00..395.49 rows=599 width=49)"
"        Group Key: customer.customer_id" -- the table is grouped by customer_id from customer table
"        ->  Hash Join  (cost=22.48..315.02 rows=14596 width=23)"
"              Hash Cond: (payment.customer_id = customer.customer_id)" -- finds the common customer_id and joins payment and customer table
"              ->  Seq Scan on payment  (cost=0.00..253.96 rows=14596 width=8)"
"              ->  Hash  (cost=14.99..14.99 rows=599 width=17)"
"                    ->  Seq Scan on customer  (cost=0.00..14.99 rows=599 width=17)"


FOR QUESTION 5:

"Sort  (cost=246.20..246.52 rows=128 width=40)" -- number of movies
"  Sort Key: (count(film.title)) DESC" -- sorts the table in descending order of number of movies
"  ->  HashAggregate  (cost=240.12..241.72 rows=128 width=40)"
"        Group Key: concat(actor.first_name, ' ', actor.last_name)" concat first and last name to one column named actor
"        ->  Hash Join  (cost=85.50..212.81 rows=5462 width=47)"
"              Hash Cond: (film_actor.film_id = film.film_id)" -- connect table film and film_actor using film_id
"              ->  Hash Join  (cost=6.50..105.76 rows=5462 width=15)"
"                    Hash Cond: (film_actor.actor_id = actor.actor_id)" -- connect table film_actor and actor using actor_id
"                    ->  Seq Scan on film_actor  (cost=0.00..84.62 rows=5462 width=4)"
"                    ->  Hash  (cost=4.00..4.00 rows=200 width=17)"
"                          ->  Seq Scan on actor  (cost=0.00..4.00 rows=200 width=17)"
"              ->  Hash  (cost=66.50..66.50 rows=1000 width=19)"
"                    ->  Seq Scan on film  (cost=0.00..66.50 rows=1000 width=19)"
"                          Filter: ((release_year)::integer = 2006)" -- filter only movies released in 2006


7.     What is the average rental rate per genre? 

SELECT
	category.name AS genre,
	ROUND(AVG(film.rental_rate),2) AS avg_rental_rate
FROM 
	category
INNER JOIN
	film_category ON film_category.category_id=category.category_id
INNER JOIN
	film ON film.film_id=film_category.film_id
GROUP BY category.name
ORDER BY ROUND(AVG(film.rental_rate),2) DESC;
-- inner joined film and film_category to category to get the average rental rate as well as the genre. 

8.     How many films were returned late? Early? On time? 

WITH table1 AS (SELECT *, DATE_PART('day',return_date-rental_date) AS date_difference
		   FROM rental),
table2 AS (SELECT rental_duration, date_difference,
		  CASE
		  	WHEN rental_duration> date_difference THEN 'Returned Early'
		  	WHEN rental_duration = date_difference THEN 'Returned on Time'
		  	ELSE 'Returned Late'
		  END AS Return_Status
FROM film
INNER JOIN inventory ON inventory.film_id=film.film_id
INNER JOIN table1 ON table1.inventory_id=inventory.inventory_id)
SELECT Return_status, 
		COUNT(*) AS total_no_of_films
FROM table2
GROUP BY return_status
ORDER BY COUNT(*) DESC;

9.     What categories are the most rented and what are their total sales? 

SELECT
	category.name AS genre,
	COUNT(film.rental_rate) AS rental_rate,
	SUM(amount) AS sales
FROM 
	category
INNER JOIN
	film_category ON film_category.category_id=category.category_id
INNER JOIN
	film ON film.film_id=film_category.film_id
INNER JOIN 
	inventory ON inventory.film_id=film.film_id
INNER JOIN
	rental ON rental.inventory_id=inventory.inventory_id
INNER JOIN
	payment ON payment.rental_id=rental.rental_id
GROUP BY category.name
ORDER BY SUM(amount) DESC;

10.     Create a view for 8 and a view for 9. Be sure to name them appropriately.  

QUESTION NUMBER 8:

CREATE VIEW return_status AS -- create alias 
WITH table1 AS (SELECT *, DATE_PART('day',return_date-rental_date) AS date_difference -- select all of the dates, and find the difference between rental date and return date
		   FROM rental), -- data was selected from table rental
table2 AS (SELECT rental_duration, date_difference, -- select the rental duration and date difference we found earlier
		  CASE -- set up a case
		  	WHEN rental_duration> date_difference THEN 'Returned Early' -- define what is returned early
		  	WHEN rental_duration = date_difference THEN 'Returned on Time' -- defined what is returned on time
		  	ELSE 'Returned Late' -- set up an else clause for returned late
		  END AS Return_Status -- end the case and set an alias
FROM film -- from table film
INNER JOIN inventory ON inventory.film_id=film.film_id -- join table inventory and film using common film_id
INNER JOIN table1 ON table1.inventory_id=inventory.inventory_id) -- inner join table1 using inventory_id
SELECT Return_status, -- select the data
		COUNT(*) AS total_no_of_films -- count all the number of films
FROM table2 -- from table2
GROUP BY return_status -- group together by return_status
ORDER BY COUNT(*) DESC; -- sort by number of films


QUESTION NUMBER 9:

CREATE VIEW genres AS -- create alias
SELECT
	category.name AS genre, -- alias the category name
	COUNT(film.rental_rate) AS rental_rate, -- count rental rate of films and alias as rental rate
	SUM(amount) AS sales -- sum the amount of payment tables and alias as sales
FROM 
	category --from table category
INNER JOIN
	film_category ON film_category.category_id=category.category_id -- join table film category and category on category_id
INNER JOIN
	film ON film.film_id=film_category.film_id -- join film and film category on film_id
INNER JOIN 
	inventory ON inventory.film_id=film.film_id -- join inventory and film using film_id
INNER JOIN
	rental ON rental.inventory_id=inventory.inventory_id -- join rental and inventory table using inventory_id
INNER JOIN
	payment ON payment.rental_id=rental.rental_id -- join payment and rental using rental_id
GROUP BY category.name -- group by the name of category
ORDER BY SUM(amount) DESC; -- sort by most sales